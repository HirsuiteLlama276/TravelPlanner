@page "/call-web-api"
@using System.Text.Json
@using System.Text.Json.Serialization
@using global::GoogleApi
@using global::GoogleApi.Entities.Places.Details.Request
@using Google.Apis.Auth
@using Google.Apis.Auth.OAuth2.Flows
@using Google.Apis.Auth.OAuth2.Web
@using Google.Apis.Http
@using GoogleMapsComponents.Maps.Places
<h1>Call web API from a Blazor Server Razor component</h1>

@if (getBranchesError || places is null)
{
    <p>Unable to get data from HTTP response.</p>
}
else
{
    <ul>
        @foreach (var placeName in places)
        {
            <li>@placeName.Name</li>
        }
    </ul>
}

@code {
    private IEnumerable<PlaceName>? places = [];
    private bool getBranchesError;
    private bool shouldRender;
    string APIKEY = "";
    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient();
        var test = new GooglePlaces.DetailsApi(client);
        var placesDetailsResponse = test.QueryAsync(new PlacesDetailsRequest());
        var response =  client.GetAsync("https://maps.googleapis.com/maps/api/place/details/json?place_id=ChIJjVT5hPmhFkcRKiKV4cWZePY&key=" + APIKEY); ;
        
        if (response.IsCompleted)
        {
            string jsonString = response.Result.ToString();
            Console.WriteLine(jsonString); 
            Console.WriteLine("nice");
        }
        else
        {
            getBranchesError = true;
        }
        shouldRender = true;
    }

    public class PlaceName
    {
        [JsonPropertyName("formatted_address")]
        public string? Name { get; set; }
    }
}