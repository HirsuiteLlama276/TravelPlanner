@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
<h1>Call web API from a Blazor Server Razor component</h1>

@if (_getBranchesError || places is null)
{
    <p>Unable to get data from HTTP response.</p>
}
else
{
    <ul>
        @foreach (var placeName in places)
        {
            <li>@placeName.Name</li>
        }
    </ul>
}

@code {
    private IEnumerable<PlaceName>? places = [];
    private bool _getBranchesError;
    private bool _shouldRender;
    const string _apikey = "";
    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient();
        //client.BaseAddress = new Uri("https://places.googleapis.com/v1/places/");
        client.BaseAddress = new Uri("https://places.googleapis.com/v1/");
        client.DefaultRequestHeaders.Add("accept", "application/json");
        client.DefaultRequestHeaders.Add("X-Goog-Api-Key", _apikey);
        client.DefaultRequestHeaders.Add("X-Goog-FieldMask", "places.displayName,places.formattedAddress");
        
        var response = await client.PostAsJsonAsync("./places:searchText",  new { textQuery = "hotele bielsko" });
        if (response.IsSuccessStatusCode)
        {
            var getContent = await response.Content.ReadAsStringAsync();
            var jsonString = JsonDocument.Parse(getContent);
            var rootPlaces = jsonString.RootElement.GetProperty("places");
            for (int i = 0; i < rootPlaces.GetArrayLength(); i++)
            {
               Console.WriteLine(rootPlaces[i].GetProperty("displayName").ToString());
                i++;
            }
        }
        else
        {
            _getBranchesError = true;
        }
        _shouldRender = true;
    }

    public class PlaceName
    {
        [JsonPropertyName("formatted_address")]
        public string? Name { get; set; }
    }
}