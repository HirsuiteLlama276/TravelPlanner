@page "/place"
@inject HttpClient Http
@inject TravelDataMigration TravelData
@inject NavigationManager Navigation
@using System.Text.Json

<MudPopoverProvider></MudPopoverProvider>

<head>
    <style>
        .mud-autocomplete-input, .mud-list {
            background-color: lightblue;
        }

        .mud-popover {
            z-index: 1500 !important;
        }

        .header-gradient {
            background: linear-gradient(180deg, rgba(36, 122, 218, 0.79) 0%, rgba(30, 188, 84, 0.79) 100%);
            text-align: center;
        }

        .gradient-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            background: linear-gradient(180deg, rgba(36, 122, 218, 0.79) 0%, rgba(30, 188, 84, 0.79) 100%);
        }

        .center-content {
            display: flex;
            justify-content: center;
            width: 100%;
        }

        .nav-menu-gradient {
            background: linear-gradient(180deg, rgba(36, 122, 218, 0.79) 0%, rgba(30, 188, 84, 0.79) 100%);
            min-height: 5vh;
        }

        .full-width {
            width: 100%;
        }

        .date-picker-zindex {
            z-index: 1600 !important;
        }

        .mud-picker-container {
            background: linear-gradient(180deg, rgba(36, 122, 218, 1) 0%, rgba(30, 188, 84, 1) 100%);
        }

        .mud-picker-calendar .mud-day.mud-range.mud-range-between {
            border-radius: 0;
            background-color: dodgerblue;
        }

        .mud-picker-calendar .mud-day.mud-range.mud-range-start-selected {
            background-color: dodgerblue !important;
        }

        .mud-picker-calendar .mud-day.mud-range.mud-range-end-selected {
            background-color: dodgerblue !important;
        }

    </style>
</head>

<script>
    function adjustDescriptionWidth() {
        var image = document.getElementById('selectedImage');
        var description = document.getElementById('selectedDescription');
        if (image && description) {
            description.style.maxWidth = image.clientWidth + 'px';
        }
    }
    window.onload = adjustDescriptionWidth;
    window.onresize = adjustDescriptionWidth;
</script>

<div class="nav-menu-gradient">
    <MudToolbar Color="Color.Primary">
    <MudToolbarRow>
        <MudToolbarItem>
            <MudButton OnClick="NavigateToTravelList" Color="Color.Primary" Variant="Variant.Text"
                           Style="border: 1px solid green; border-radius: 4px;font-size:larger">Travel List</MudButton>
        </MudToolbarItem>
        <MudToolbarItem>
                <MudButton OnClick="NavigateToPlace" Color="Color.Primary" Variant="Variant.Text" 
                Style=" border: 1px solid green; border-radius: 4px;font-size:larger">Place</MudButton>
        </MudToolbarItem>
        <MudToolbarItem>
                <MudButton OnClick="NavigateToPlanner" Color="Color.Primary" Variant="Variant.Text" 
                Style="border: 1px solid green; border-radius: 4px;font-size:larger">Planner</MudButton>
        </MudToolbarItem>
    </MudToolbarRow>
</MudToolbar>
</div>

<PageTitle>Place</PageTitle>

<div class="header-gradient">
    <h1 style="color: white; padding: 20px 0;">Travel Planner</h1>
</div>


<MudGrid Spacing="1">
    <MudItem>
        <MudPaper class="rounded-3" Width="400px" Height="400px" Style="background-color: lightblue">
            <MudContainer MaxWidth="MaxWidth.Small">
                <MudStack Spacing="1" >
                    <MudText Typo="Typo.h1" Style="font-size:25px; font-weight:700; margin-top: 30px; 
                               text-align:center;">Wybierz cel podróży</MudText>
                    <MudAutocomplete T="string" Label="Country" Value="@Hotel"
                                     ValueChanged="@HotelValueChange"
                                     SearchFunc="@SearchForHotel" Variant="Variant.Filled"
                                     ResetValueOnEmptyText=true
                                     Style="background-color:white; margin-top: 40px;" />
                </MudStack>
            </MudContainer>
        </MudPaper>
    </MudItem>
    <MudItem xs="8">
        <MudPaper class="rounded-3" Height="100%" Style="background-color: lightblue;">
            <MudCardContent>
                <div style="width: 100%; height: 100%; position: relative; text-align: center;">
                    <div style="width: 100%; height: 100px; background: linear-gradient(180deg, rgba(255,255,255,0) 0%, rgba(0,123,255,1) 100%);
                        text-align: center; display: flex; align-items: center;
                        justify-content: center; display: @(string.IsNullOrEmpty(selectedPlaceImageUrl) ? "flex" : "none");">
                        <p style="font-size: 24px; color: white;">Gdzie się zatrzymasz?</p>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedPlaceImageUrl))
                    {
                        <div style="text-align: center;">
                            <div style="display: inline-block; max-width: 100%; overflow: hidden;">
                                <img src="@selectedPlaceImageUrl" id="selectedImage" alt="Selected Place" style="width: 100%; min-width:700px; height: auto; max-height: 500px; object-fit: contain;" onload="adjustDescriptionWidth()" />
                            </div>
                            <div id="selectedDescription" style="text-align: center; margin: 20px auto 0 auto; width: fit-content;">
                                <a style="word-wrap: break-word;" href =@selectedPlaceDescription>Strona hotelu</a>

                            </div>
                        </div>

                    }
                </div>
            </MudCardContent>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public string Hotel = "";
    string selectedPlaceDescription = "";
    string selectedPlaceImageUrl="";
    private string[] hotelData = new string[5];


    private async Task<IEnumerable<string>> SearchForHotel(string searchText)
    {
        var client = new myHttpClient();
        hotelData = new string[5];
        if (searchText == "")
            return hotelData;
        var response = await client.SearchForHotel(searchText);
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<JsonDocument>();
            if (jsonString != null)
            {
                var rootPlaces = jsonString.RootElement.GetProperty("places");
                for (int i = 0; i < 5; i++)
                {
                    hotelData[i] = rootPlaces[i].GetProperty("displayName").GetProperty("text").ToString();
                    i++;
                }
            }
        }
        return hotelData;
    }


    private async void HotelValueChange(string newValue)
    {        
        Hotel = newValue;
        if (string.IsNullOrEmpty(newValue)) return;
        string photoName ="";
        var client = new myHttpClient();
        var response = await client.SearchForHotel(Hotel);
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<JsonDocument>();
            if (jsonString != null)
            {
                var rootPlaces = jsonString.RootElement.GetProperty("places");
                photoName = rootPlaces[0].GetProperty("photos")[0].GetProperty("name").ToString();
                selectedPlaceDescription = rootPlaces[0].GetProperty("websiteUri").ToString();
            }
        }
        client = new myHttpClient();
        var photoResponse = await client.SearchForHotelPhotos(photoName);
        if (photoResponse.IsSuccessStatusCode)
        {
            var photoResponseContent = await photoResponse.Content.ReadFromJsonAsync<JsonDocument>();
            if (photoResponseContent != null)
            { 
                selectedPlaceImageUrl = photoResponseContent.RootElement.GetProperty("photoUri").ToString();
            }
        }
    }
    
    private void NavigateToTravelList()
    {
        Navigation.NavigateTo("/TravelList");
    }

    private void NavigateToPlace()
    {
        Navigation.NavigateTo("/place");
    }

    private void NavigateToPlanner()
    {
        Navigation.NavigateTo("/planner");
    }
}
